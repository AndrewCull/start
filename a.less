@charset "utf-8";

/*!
  Â© sparanoid.com
*/

.perspective (@var: 200) {
  -webkit-perspective: @arguments;
     -moz-perspective: @arguments;
          perspective: @arguments;
}

.animation (@var) {
  -webkit-animation: @arguments;
     -moz-animation: @arguments;
          animation: @arguments;
}

.animation-delay (@var) {
  -webkit-animation-delay: @arguments;
     -moz-animation-delay: @arguments;
          animation-delay: @arguments;
}

.transform-origin (@var) {
  -webkit-transform-origin: @arguments;
     -moz-transform-origin: @arguments;
          transform-origin: @arguments;
}

.column-width (@var) {
  -webkit-column-width: @arguments;
     -moz-column-width: @arguments;
          column-width: @arguments;
}

.column-gap (@var) {
  -webkit-column-gap: @arguments;
     -moz-column-gap: @arguments;
          column-gap: @arguments;
}

#gridSystem {
  // Setup the mixins to be used
  .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, @columns) {
    width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
  } 
  .offset(@gridColumnWidth, @gridGutterWidth, @columns) {
    margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1)) + (@gridGutterWidth * 2);
  }
  .gridColumn(@gridGutterWidth) {
    float: left;
    margin-left: @gridGutterWidth;
  }
  // Take these values and mixins, and make 'em do their thang
  .generate(@gridColumns, @gridColumnWidth, @gridGutterWidth) {
    // Row surrounds the columns
    .row {
      margin-left: @gridGutterWidth * -1;
    }
    // Find all .span# classes within .row and give them the necessary properties for grid columns (supported by all browsers back to IE7, thanks @dhg)
    [class*="span"] {
      #gridSystem > .gridColumn(@gridGutterWidth);
    }
    // Default columns
    .span1     { #gridSystem > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 1); }
    .span2     { #gridSystem > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 2); }
    .span3     { #gridSystem > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 3); }
    .span4     { #gridSystem > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 4); }
    .span5     { #gridSystem > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 5); }
    .span6     { #gridSystem > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 6); }
    .span7     { #gridSystem > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 7); }
    .span8     { #gridSystem > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 8); }
    .span9     { #gridSystem > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 9); }
    .span10    { #gridSystem > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 10); }
    .span11    { #gridSystem > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 11); }
    .span12,
    .container { #gridSystem > .columns(@gridGutterWidth, @gridColumnWidth, @gridRowWidth, 12); }
    // Offset column options
    .offset1   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 1); }
    .offset2   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 2); }
    .offset3   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 3); }
    .offset4   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 4); }
    .offset5   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 5); }
    .offset6   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 6); }
    .offset7   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 7); }
    .offset8   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 8); }
    .offset9   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 9); }
    .offset10  { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 10); }
    .offset11  { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 11); }
  }
}

@gridColumns:             12;
@gridColumnWidth:         60px;
@gridGutterWidth:         20px;
@gridRowWidth:            (@gridColumns * @gridColumnWidth) + (@gridGutterWidth * (@gridColumns - 1));

#gridSystem > .generate(@gridColumns, @gridColumnWidth, @gridGutterWidth);

* {
  margin: 0;
  padding: 0;
  // I don't need any decoration here. 
  text-decoration: none;
}

:root {
  color: rgba(0, 0, 0, .3);
  //color: rgba(255, 255, 255, .3);
  background: #fff;
  //background: #000;
  font-size: 14px;
  font-family: 'Hiragino Mincho Pro', serif;
  line-height: 1.7;
  margin: 0 auto;
  padding: 75px 120px;
  .perspective(200);
  //-webkit-perspective-origin-x: 0%;
  //-webkit-perspective-origin-y: 10%;
}

a {
  color: #000;
  //color: #fff;
  background: rgba(255, 255, 0, 0);
  &:hover {
    border-bottom: 1px dotted rgba(0, 0, 0, .5);
    background: rgba(255, 255, 0, .9);
  }
}

header, article, footer, h2 {
  padding-bottom: 30px;
}

h1, article, footer {
  .transform-origin(0 0);
  .transform-origin(-100px 0);
  -webkit-transform-style: preserve-3d;
  .animation(spin .8s 1 ease backwards);
  //.animation(spin 24s 1 ease backwards);
}

h1 {
  position: relative;
  font-weight: 100;
  font-size: 36px;
  line-height: 1;
  margin-left: -4px;
  .animation-delay(.55s);
  //.animation-delay(16.5s);
  &:before {
    position: absolute;
    top: 0;
    left: -40px;
    height: 38px;
    width: 38px;
    content: '';
    background: url(a.svg) no-repeat 0 0;
    background-size: 38px 38px;
  }
}

h2, footer, article p {
  font-family: Arial, sans-serif;
  font-size: 10px;
  font-weight: normal;
  text-transform: uppercase;
}

h2 {
  .animation(txt .4s 1 ease backwards);
  //.animation(txt 90s 1 ease backwards);
  .animation-delay(2.4s);  
}

article {
  &:nth-of-type(1) {
    .animation-delay(.6s);  
    //normal speed * 20x 
    //.animation-delay(18s);
  }
  &:nth-of-type(2) {
    .animation-delay(.65s);
    //.animation-delay(19.5s);
  }
  &:nth-of-type(3) {
    .animation-delay(.7s);
    //.animation-delay(21s);
  }
  &:nth-of-type(4) {
    .animation-delay(.75s);
    //.animation-delay(22.5s);
  }
  &:nth-of-type(5) {
    .animation-delay(.8s);
    //.animation-delay(24s);
  }
  &:nth-of-type(6) {
    .animation-delay(.85s);
    //.animation-delay(25.5s);
  }
  ul {
    list-style: none;
    .column-width(180px);
    .column-gap(20px);
  }
}

footer {
  .animation-delay(.8s);
  //.animation-delay(24s);
}

@-webkit-keyframes spin {
  0%   {-webkit-transform: rotateY(-180deg);}
  100% {-webkit-transform: rotateY(0deg);}
}

@-moz-keyframes spin {
  0%   {-moz-transform: rotateY(-180deg);}
  100% {-moz-transform: rotateY(0deg);}
}

@keyframes spin {
  0%   {transform: rotateY(-180deg);}
  100% {transform: rotateY(0deg);}
}


@-webkit-keyframes txt {
  0%   {opacity: 0;}
  100% {opacity: 100;}
}

@-moz-keyframes txt {
  0%   {opacity: 0;}
  100% {opacity: 100;}
}

@keyframes txt {
  0%   {opacity: 0;}
  100% {opacity: 100;}
}

::selection {
  background: rgba(255, 255, 0, .8);
}

@media screen and (max-width: 240px) { 
  :root * {
    display: none;
  }
  :root:before {
    content: "WTF?";
    line-height: 2em;
  }
}

@media only screen and (max-device-width: 480px) { 
  :root {
    -webkit-text-size-adjust: none;
    padding: 50px 20px;
  }
}

@media only screen and (max-device-width: 480px),
only screen and (min-device-width: 768px) and (max-device-width: 1024px) { 
  :root {
    color: rgba(255, 255, 255, .3);
    background: #000;
  }
  a {
    color: #fff;
    background: rgba(255, 255, 0, 0);
  }
  h1:before {
    border-color: #fff;
  }
}